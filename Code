#Deshana Vikas Shah

# Importing all libraries required in this notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import joblib

# Read the data from the remote link
url = "http://bit.ly/w-data"
s_data = pd.read_csv(url)
print("Data imported successfully")

# Display the first 10 rows of the dataset
print(s_data.head(10))

# Check for any missing values
print(s_data.isnull().sum())

# Plotting the distribution of scores
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Hours', y='Scores', data=s_data)
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.grid(True)
plt.show()

# Define feature and target variables
X = s_data[['Hours']]
y = s_data['Scores']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression model
regressor = LinearRegression()
regressor.fit(X_train, y_train)
print("Training complete.")

# Plotting the regression line
plt.figure(figsize=(10, 6))
sns.regplot(x='Hours', y='Scores', data=s_data, line_kws={'color': 'red'})
plt.title('Regression Line')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.grid(True)
plt.show()

# Predict the test set results
y_pred = regressor.predict(X_test)

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(df)

# Evaluate the model
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R^2 Score:', metrics.r2_score(y_test, y_pred))

# Save the predictions to an Excel CSV file
predictions_df = pd.DataFrame({'Hours': X_test['Hours'], 'Actual': y_test, 'Predicted': y_pred})
predictions_df.to_csv('predictions.csv', index=False)
print("Predictions saved to predictions.csv")

# Save the trained model to a file
model_filename = 'student_score_predictor_model.pkl'
joblib.dump(regressor, model_filename)
print(f"Model saved to {model_filename}")
